import os
from collections import defaultdict
import tkinter as tk
from tkinter import filedialog
from PIL import Image, ImageTk

def find_duplicates(folder_path):
    filenames = defaultdict(list)
    for root, _, files in os.walk(folder_path):
        for file in files:
            filenames[file].append(os.path.join(root, file))
    duplicates = {name: paths for name, paths in filenames.items() if len(paths) > 1}
    return duplicates

def show_image(image_path):
    try:
        image_window = tk.Toplevel()
        image_window.title(f"–ü–µ—Ä–µ–≥–ª—è–¥: {os.path.basename(image_path)}")

        img = Image.open(image_path)
        img.thumbnail((600, 600))  # –∑–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ä –¥–ª—è –≤—ñ–∫–Ω–∞
        photo = ImageTk.PhotoImage(img)

        label = tk.Label(image_window, image=photo)
        label.image = photo  # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        label.pack()
        image_window.mainloop()
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –ø–æ–∫–∞–∑–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")

def show_all_images(image_paths, title="–ü–µ—Ä–µ–≥–ª—è–¥ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤"):
    try:
        preview_window = tk.Toplevel()
        preview_window.title(title)

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∏—Å–æ—Ç–∏ –≤—ñ–∫–Ω–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 320 –ø—ñ–∫—Å–µ–ª—ñ–≤ –Ω–∞ 1 —Ñ–æ—Ç–æ + –∑–∞–ø–∞—Å)
        img_height = 320
        total_height = len(image_paths) * img_height
        max_height = preview_window.winfo_screenheight() - 100  # –∑–∞–ø–∞—Å

        final_height = min(total_height, max_height)
        preview_window.geometry(f"350x{final_height}")  # —à–∏—Ä–∏–Ω–∞ x –≤–∏—Å–æ—Ç–∞

        container = tk.Frame(preview_window)
        container.pack(fill="both", expand=True)

        images = []

        for path in image_paths:
            try:
                img = Image.open(path)
                img.thumbnail((300, 300))
                photo = ImageTk.PhotoImage(img)
                images.append(photo)

                frame = tk.Frame(container, padx=10, pady=10)
                label = tk.Label(frame, image=photo)
                label.pack()
                text = tk.Label(frame, text=path, wraplength=280, justify="left")
                text.pack()
                frame.pack()
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –≤—ñ–¥–∫—Ä–∏—Ç–∏ {path}: {e}")

        preview_window.images = images
    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ –∑–æ–±—Ä–∞–∂–µ–Ω—å: {e}")
 

def main():
    # –í–∏–±—ñ—Ä –ø–∞–ø–∫–∏
    root = tk.Tk()
    root.withdraw()
    folder = filedialog.askdirectory(title="–í–∏–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏")

    if not folder:
        print("‚ùå –ü–∞–ø–∫—É –Ω–µ –≤–∏–±—Ä–∞–Ω–æ.")
        return

    duplicates = find_duplicates(folder)

    if not duplicates:
        print("‚úÖ –î—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    total_duplicates = sum(len(paths) for paths in duplicates.values())
    print(f"\nüîÅ –ó–Ω–∞–π–¥–µ–Ω–æ {len(duplicates)} –Ω–∞–∑–≤ –∑ –¥—É–±–ª—è–º–∏, –≤—Å—å–æ–≥–æ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤: {total_duplicates - len(duplicates)}")

    for filename, paths in duplicates.items():
        print(f"\nüìÅ {filename}:")
        for i, path in enumerate(paths, 1):
            print(f"  {i}. {path}")

       # –ø–æ–∫–∞–∑ —Ñ–æ—Ç–æ –æ–¥—Ä–∞–∑—É
        image_paths = [p for p in paths if p.lower().endswith((".jpg", ".jpeg", ".png", ".bmp", ".gif"))]
        if image_paths:
            show_all_images(image_paths, title=f"–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {filename}")

        try:
            choice = int(input(f"–Ø–∫–∏–π –∑ —Ñ–∞–π–ª—ñ–≤ \"{filename}\" –≤–∏–¥–∞–ª–∏—Ç–∏? –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä (–∞–±–æ 0 —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏): "))
            if 1 <= choice <= len(paths):
                os.remove(paths[choice - 1])
                print("üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ:", paths[choice - 1])
            else:
                print("‚è© –ü—Ä–æ–ø—É—â–µ–Ω–æ.")
        except Exception as e:
            print("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞:", e)

    print("\n‚úÖ –î–æ–¥–∞—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–±–æ—Ç—É! \n\n")

if __name__ == "__main__":
    main()
